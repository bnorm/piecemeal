FILE: MutableResolved.kt
    @R|dev/bnorm/piecemeal/Piecemeal|() public final class Person : R|kotlin/Any| {
        private constructor(name: R|kotlin/String|, nickname: R|kotlin/String?| = R|<local>/name|, age: R|kotlin/Int| = Int(0)): R|Person| {
            super<R|kotlin/Any|>()
        }

        public final val name: R|kotlin/String| = R|<local>/name|
            public get(): R|kotlin/String|

        public final val nickname: R|kotlin/String?| = R|<local>/nickname|
            public get(): R|kotlin/String?|

        public final val age: R|kotlin/Int| = R|<local>/age|
            public get(): R|kotlin/Int|

        public final fun toMutable(): R|Person.Mutable|

        public final inline fun copy(transform: R|Person.Mutable.() -> kotlin/Unit|): R|Person|
            [R|Contract description]
             <
                CallsInPlace(transform, EXACTLY_ONCE)
            >


        public final class Mutable : R|kotlin/Any| {
            public final var name: R|kotlin/String|
                public get(): R|kotlin/String|
                public set(value: R|kotlin/String|): R|kotlin/Unit|

            public final var nickname: R|kotlin/String?|
                public get(): R|kotlin/String?|
                public set(value: R|kotlin/String?|): R|kotlin/Unit|

            public final var age: R|kotlin/Int|
                public get(): R|kotlin/Int|
                public set(value: R|kotlin/Int|): R|kotlin/Unit|

            public final fun setName(name: R|kotlin/String|): R|Person.Mutable|

            public final fun setNickname(nickname: R|kotlin/String?|): R|Person.Mutable|

            public final fun setAge(age: R|kotlin/Int|): R|Person.Mutable|

            public final fun build(): R|Person|

            public constructor(): R|Person.Mutable|

        }

        public final companion object Companion : R|kotlin/Any| {
            public final inline fun build(builderAction: R|Person.Mutable.() -> kotlin/Unit|): R|Person|
                [R|Contract description]
                 <
                    CallsInPlace(builderAction, EXACTLY_ONCE)
                >


            private constructor(): R|Person.Companion| {
                super<R|kotlin/Any|>()
            }

        }

    }
    public final fun person1(): R|Person| {
        ^person1 Q|Person|.R|/Person.Mutable|().R|/Person.Mutable.setName|(String(John)).R|/Person.Mutable.build|()
    }
    public final fun person2(): R|Person| {
        ^person2 Q|Person|.R|/Person.Mutable|().R|kotlin/apply|<R|Person.Mutable|>(<L> = apply@fun R|Person.Mutable|.<anonymous>(): R|kotlin/Unit| <inline=Inline, kind=EXACTLY_ONCE>  {
            this@R|special/anonymous|.R|/Person.Mutable.name| = String(John)
        }
        ).R|/Person.Mutable.build|()
    }
    public final fun person3(): R|Person| {
        ^person3 Q|Person|.R|/Person.Companion.build|(<L> = build@fun R|Person.Mutable|.<anonymous>(): R|kotlin/Unit| <inline=Inline, kind=EXACTLY_ONCE>  {
            this@R|special/anonymous|.R|/Person.Mutable.name| = String(John)
        }
        )
    }
